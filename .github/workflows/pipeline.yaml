name: pipeline

on:
  push:
    branches:
      - develop
      - feat/*
      - hotfix/*
      - main
  pull_request:
    branches:
      - develop
      - feat/*
      - hotfix/*
      - main

env:
  # https://github.com/getsops/sops/releases
  SOPS_VERSION: 3.9.0
  PYTHON_VERSION: 3.11

jobs:
  init:
    name: Init
    runs-on: ubuntu-22.04
    outputs:
      VERSION: ${{ steps.version.outputs.version }}
      VERSION_FULL: ${{ steps.version.outputs.version_full }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          # We need all Git history for "version.sh"
          fetch-depth: 0
          # Ensure "version.sh" submodule are up-to-date
          submodules: recursive

      - name: Generate versions
        id: version
        run: |
          echo "version=$(bash cicd/version/version.sh -g . -c)" >> $GITHUB_OUTPUT
          echo "version_full=$(bash cicd/version/version.sh -g . -c -m)" >> $GITHUB_OUTPUT

  sast-creds:
    name: SAST - Credentials
    runs-on: ubuntu-22.04
    env:
      CI: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7
        with:
          # We need all Git history for testing credentials
          fetch-depth: 0
          # Ensure all submodules up-to-date
          submodules: recursive

      - name: Run tests
        uses: trufflesecurity/trufflehog@v3.78.1
        with:
          base: ${{ github.event.repository.default_branch }}
          extra_args: --only-verified
          head: HEAD~1

  sast-semgrep:
    name: SAST - Semgrep
    runs-on: ubuntu-22.04
    permissions:
      # Allow to write to GitHub Security
      security-events: write
    container:
      image: returntocorp/semgrep
    env:
      CI: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Run tests
        # Semgrep can be used to break the build when it detects security issues. In this case we want to upload the issues to GitHub Security
        continue-on-error: true
        env:
          SEMGREP_RULES: p/cwe-top-25 p/owasp-top-ten
        run: semgrep ci --sarif --output=semgrep.sarif

      - name: Upload results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3.25.10
        with:
          sarif_file: semgrep.sarif

  static-test:
    name: Static tests
    runs-on: ubuntu-22.04
    env:
      CI: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Setup Python
        uses: actions/setup-python@v5.1.1
        with:
          cache-dependency-path: requirements-dev.txt
          cache: pip
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install app dependencies
        run: make install

      - name: Run tests
        run: make static-test

  unit-test:
    name: Unit tests
    runs-on: ubuntu-22.04
    needs:
      - init
    permissions:
      # Allow to write commit checks
      checks: write
      # Allow to write comments on pull requests
      pull-requests: write
    env:
      CI: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Setup Python
        uses: actions/setup-python@v5.1.1
        with:
          cache-dependency-path: requirements-dev.txt
          cache: pip
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup SOPS
        run: |
          curl -LO https://github.com/getsops/sops/releases/download/v${{ env.SOPS_VERSION }}/sops-v${{ env.SOPS_VERSION }}.linux.amd64
          mv sops-v${{ env.SOPS_VERSION }}.linux.amd64 /usr/local/bin/sops
          chmod +x /usr/local/bin/sops
          sops --version

      - name: Install app dependencies
        run: make install

      - name: Decrypt test config
        run: |
          echo '${{ secrets.CONFIG_TEST_AGE }}' > configs/key.txt
          export SOPS_AGE_KEY_FILE=configs/key.txt
          sops -d configs/test.yaml > config.yaml
          rm configs/key.txt

      - name: Restore cache for pytest
        id: cache-primes
        uses: actions/cache/restore@v4.0.2
        with:
          key: pytest-${{ hashFiles('tests/**') }}
          path: .pytest_cache
          restore-keys: pytest-

      - name: Run tests
        run: version_full=${{ needs.init.outputs.VERSION_FULL }} make unit-test

      - name: Save cache for pytest
        if: always()
        uses: actions/cache/save@v4.0.2
        with:
          key: pytest-${{ hashFiles('tests/**') }}
          path: .pytest_cache

      - name: Upload results
        uses: actions/upload-artifact@v4.3.4
        if: always()
        with:
          name: test-results
          path: test-reports/*

      - name: Publish results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: Test results
          files: test-reports/*.xml

  create-release:
    name: Create release
    needs:
      - init
      - sast-creds
      - sast-semgrep
      - static-test
      - unit-test
    permissions:
      # Allow to create releases
      contents: write
    runs-on: ubuntu-22.04
    outputs:
      RELEASE_ID: ${{ steps.create-release.outputs.result }}
    # Only publish on non-scheduled main branch, as there is only one Helm repo and we cannot override an existing version
    if: (github.event_name != 'schedule') && (github.ref == 'refs/heads/main')
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Create release
        id: create-release
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const isMain = context.ref == `refs/heads/main`;
            const repoName = context.repo.repo;

            console.log(isMain ? 'Creating release for default branch' : 'Creating release for non-default branch');

            const { data } = await github.rest.repos.createRelease({
              draft: true,
              generate_release_notes: true,
              name: `${repoName} v${{ needs.init.outputs.VERSION }}`,
              owner: context.repo.owner,
              prerelease: !isMain,
              repo: repoName,
              tag_name: 'v${{ needs.init.outputs.VERSION }}',
              target_commitish: context.ref,
            });
            return data.id

  attest-dependencies:
    name: Attest - Dependencies
    permissions:
      # Allow to write to GitHub Security
      contents: write
    runs-on: ubuntu-22.04
    needs:
      - create-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Run attestation
        uses: advanced-security/component-detection-dependency-submission-action@v0.0.2
        with:
          directoryExclusionList: tests,docs,examples

  attest-sbom:
    name: Attest - SBOM
    runs-on: ubuntu-22.04
    needs:
      - create-release
      - init
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Init Syft
        uses: anchore/sbom-action/download-syft@v0.16.1

      - name: Run attestation
        run: make sbom version_full=${{ needs.init.outputs.VERSION_FULL }}

      - name: Upload results to release
        uses: actions/upload-artifact@v4.3.4
        with:
          name: sbom
          path: sbom-reports/*

  publish-release:
    name: Publish release
    permissions:
      # Allow to write releases
      contents: write
    runs-on: ubuntu-22.04
    needs:
      - create-release
    # Only publish on non-scheduled default branch
    if: (github.event_name != 'schedule') && (github.ref == 'refs/heads/main')
    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v7.0.1
        with:
          script: |
            github.rest.repos.updateRelease({
              draft: false,
              owner: context.repo.owner,
              release_id: ${{ needs.create-release.outputs.RELEASE_ID }},
              repo: context.repo.repo,
            });
